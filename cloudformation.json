{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "DNS Validated ACM Certificate Example",
    "Outputs": {
        "CertificateARN": {
            "Description": "The ARN of the example certificate",
            "Value": {
                "Ref": "ExampleCertificate"
            }
        }
    },
    "Resources": {
        "CustomAcmCertificateLambda": {
            "Metadata": {
                "Source": "https://github.com/dflook/cloudformation-dns-certificate",
                "Version": "1.2.0"
            },
            "Properties": {
                "Code": {
                    "ZipFile": "A='PhysicalResourceId'\nB='Tags'\nC='Status'\nD='ValidationMethod'\nE='.'\nF='ResourceRecord'\nG='I'\nH='DomainName'\nI='DomainValidationOptions'\nJ='OldResourceProperties'\nK='RequestType'\nL='SUCCESS'\nM='DNS'\nN='Certificate'\nO='PENDING_VALIDATION'\nP='ValidationStatus'\nQ='Name'\nR='Type'\nS='Value'\nT='ResourceProperties'\nU='FAILED'\nV='None'\nimport time,boto3,hashlib,json,copy,logging\nfrom botocore.vendored import requests\nl=logging.getLogger()\nl.setLevel(logging.INFO)\ndef send(event):\n\tl.info(event);resp=requests.put(event['ResponseURL'],data=json.dumps(event));l.info(resp)\ndef create_cert(acm,props,i_token):\n\ta=copy.copy(props);del a['ServiceToken']\n\tif B in props:del a[B]\n\tif D in props:\n\t\tif props[D]==M:\n\t\t\ttry:\n\t\t\t\tfor name in set([props[H]]+props.get('SubjectAlternativeNames',[])):get_zone_for(name,props)\n\t\t\texcept KeyError:raise RuntimeError('Validation opts missing')\n\t\t\tdel a[I]\n\t\telif props[D]=='EMAIL':del a[D]\n\treturn acm.request_certificate(IdempotencyToken=i_token,**a)['CertificateArn']\ndef add_tags(acm,arn,props):\n\tif B in props:acm.add_tags_to_certificate(CertificateArn=arn,Tags=props[B])\ndef get_zone_for(name,props):\n\tname=name.rstrip(E);hosted_zones={v[H].rstrip(E):v['HostedZoneId']for v in(props[I])};components=name.split(E)\n\twhile len(components):\n\t\tif E.join(components)in hosted_zones:return hosted_zones[E.join(components)]\n\t\tcomponents=components[1:]\n\traise RuntimeError('Validation opts missing (%s)'%str(name))\ndef validate(acm,arn,props):\n\tif D in props and props[D]==M:\n\t\tall_records_created=False\n\t\twhile not all_records_created:\n\t\t\tall_records_created=True;certificate=acm.describe_certificate(CertificateArn=arn)[N];l.info(certificate)\n\t\t\tif certificate[C]!=O:return\n\t\t\tfor v in certificate[I]:\n\t\t\t\tif P not in v or F not in v:\n\t\t\t\t\tall_records_created=False;continue\n\t\t\t\tif v[P]==O:\n\t\t\t\t\tresponse=boto3.client('route53').change_resource_record_sets(HostedZoneId=get_zone_for(v[H],props),ChangeBatch={'Comment':'Domain validation for %s'%arn,'Changes':[{'Action':'UPSERT','ResourceRecordSet':{Q:v[F][Q],R:v[F][R],'TTL':60,'ResourceRecords':[{S:v[F][S]}]}}]});l.info(response)\n\t\t\ttime.sleep(1)\ndef replace_cert(event):\n\told=copy.copy(event[J])\n\tif B in old:del old[B]\n\tnew=copy.copy(event[T])\n\tif B in new:del new[B]\n\treturn old!=new\ndef wait_for_issuance(acm,arn,context):\n\twhile context.get_remaining_time_in_millis()/1000>30:\n\t\tcertificate=acm.describe_certificate(CertificateArn=arn)[N];l.info(certificate)\n\t\tif certificate[C]=='ISSUED':return True\n\t\telif certificate[C]==U:raise RuntimeError(certificate.get('FailureReason','Failed to issue certificate'))\n\t\ttime.sleep(5)\n\treturn False\ndef reinvoke(event,context):\n\tevent[G]=event.get(G,0)+1\n\tif event[G]>8:raise RuntimeError('Timer expired')\n\tl.info('Reinvoking for the %i time'%event[G]);l.info(event);boto3.client('lambda').invoke(FunctionName=context.invoked_function_arn,InvocationType='Event',Payload=json.dumps(event).encode())\ndef handler(event,context):\n\tl.info(event)\n\ttry:\n\t\ti_token=hashlib.new('md5',(event['RequestId']+event['StackId']).encode()).hexdigest();props=event[T];acm=boto3.client('acm',region_name=props.pop('Region',None))\n\t\tif event[K]=='Create':\n\t\t\tevent[A]=V;event[A]=create_cert(acm,props,i_token);add_tags(acm,event[A],props);validate(acm,event[A],props)\n\t\t\tif wait_for_issuance(acm,event[A],context):\n\t\t\t\tevent[C]=L;return send(event)\n\t\t\telse:return reinvoke(event,context)\n\t\telif event[K]=='Delete':\n\t\t\tif event[A]!=V:acm.delete_certificate(CertificateArn=event[A])\n\t\t\tevent[C]=L;return send(event)\n\t\telif event[K]=='Update':\n\t\t\tif replace_cert(event):\n\t\t\t\tevent[A]=create_cert(acm,props,i_token);add_tags(acm,event[A],props);validate(acm,event[A],props)\n\t\t\t\tif not wait_for_issuance(acm,event[A],context):return reinvoke(event,context)\n\t\t\telse:\n\t\t\t\tif B in event[J]:acm.remove_tags_from_certificate(CertificateArn=event[A],Tags=event[J][B])\n\t\t\t\tadd_tags(acm,event[A],props)\n\t\t\tevent[C]=L;return send(event)\n\t\telse:raise RuntimeError('Unknown RequestType')\n\texcept Exception as ex:\n\t\tl.exception('');event[C]=U;event['Reason']=str(ex);return send(event)\n\n"
                },
                "Description": "Cloudformation custom resource for DNS validated certificates",
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "CustomAcmCertificateLambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "python3.6",
                "Timeout": 300
            },
            "Type": "AWS::Lambda::Function"
        },
        "CustomAcmCertificateLambdaExecutionRole": {
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": "lambda.amazonaws.com"
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaRole"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "acm:AddTagsToCertificate",
                                        "acm:DeleteCertificate",
                                        "acm:DescribeCertificate",
                                        "acm:RemoveTagsFromCertificate",
                                        "acm:RequestCertificate"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        {
                                            "Fn::Sub": "arn:aws:acm:*:${AWS::AccountId}:certificate/*"
                                        }
                                    ]
                                },
                                {
                                    "Action": [
                                        "acm:RequestCertificate"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "*"
                                    ]
                                },
                                {
                                    "Action": [
                                        "route53:ChangeResourceRecordSets"
                                    ],
                                    "Effect": "Allow",
                                    "Resource": [
                                        "arn:aws:route53:::hostedzone/*"
                                    ]
                                }
                            ],
                            "Version": "2012-10-17"
                        },
                        "PolicyName": {
                            "Fn::Sub": "${AWS::StackName}-CustomAcmCertificateLambdaExecutionPolicy"
                        }
                    }
                ]
            },
            "Type": "AWS::IAM::Role"
        },
        "ExampleCertificate": {
            "Properties": {
                "DomainName": "test.example.com",
                "DomainValidationOptions": [
                    {
                        "DomainName": "test.example.com",
                        "HostedZoneId": "Z2KZ5YTUFZNC7H"
                    }
                ],
                "Region": "us-east-1",
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "CustomAcmCertificateLambda",
                        "Arn"
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "Example Certificate"
                    }
                ],
                "ValidationMethod": "DNS"
            },
            "Type": "AWS::CloudFormation::CustomResource"
        }
    }
}